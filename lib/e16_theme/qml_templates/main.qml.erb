/********************************************************************
Autogenerated by Mathieu Jobin - Copyright (C) 2020

Inspired from Plastik - Copyright (C) 2012 Martin Gräßlin

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************/
import QtQuick 2.0
import org.kde.kwin.decoration 0.1
import org.kde.kwin.decorations.plastik 1.0

Decoration {
    function readBorderSize() {
      extendedBorders.setAllBorders(0);
      borders.setLeftBorder(<%= border_size_left %>);
      borders.setRightBorder(<%= border_size_right %>);
      borders.setTopBorder(<%= border_size_top %>);
      borders.setBottomBorder(<%= border_size_bottom %>);
    }

    property int borderSize: 0
    //property alias buttonSize: titleRow.captionHeight
    //property alias titleAlignment: caption.horizontalAlignment
    //property color titleBarColor: options.titleBarColor
    // set by readConfig after Component completed, ensures that buttons do not flicker
    property int animationDuration: 0
    property bool animateButtons: false

    id: root
    alpha: false
    Canvas {
      id: mycanvas
      anchors {
        fill: parent
      }
      onPaint: {
        var ctx = getContext("2d");
        //=>{:topleft_origin=>-1, :topleft_x_percentage=>0,
        <%= parts.map do |image, info|
          x = info[:BORDER_PART_REGION][:topleft_x_absolute]
          y = info[:BORDER_PART_REGION][:topleft_y_absolute]
          if x.to_i > 0
          "ctx.drawImage('#{parser.source_image(image, mode)}', #{x}, #{y});\n"
          else
            x = info[:BORDER_PART_REGION][:bottomright_x_absolute]
            y = info[:BORDER_PART_REGION][:bottomright_y_absolute]
            if x.to_i > 0
              " // from bottom corner?
              ctx.drawImage('#{parser.source_image(image, mode)}', -#{x}, -#{y});\n"
            else
              "// #{image} -- #{info}"
            end
          end
        end.join("\n") %>

      }
    }
    Rectangle {
        <% parser.display_all_parts(mode) %>

        Rectangle {
            id: top
            property int topMargin: 1
            property real normalHeight: titleRow.normalHeight + topMargin + 1
            property real maximizedHeight: titleRow.maximizedHeight + 1
            anchors {
                left: parent.left
                right: parent.right
                top: parent.top
                //topMargin: decoration.client.maximized ? 0 : top.topMargin
                //leftMargin: decoration.client.maximized ? 0 : 2
                //rightMargin: decoration.client.maximized ? 0 : 2
            }
            gradient: Gradient {
                id: topGradient
                GradientStop {
                    position: 0.0
                }
                GradientStop {
                    id: middleGradientStop
                }
                GradientStop {
                    position: 1.0
                    color: root.titleBarColor
                }
            }
            Rectangle {
                height: 1
                anchors {
                    top: top.top
                    left: top.left
                    right: top.right
                }
            }

            Item {
                id: titleRow
                property real captionHeight: caption.implicitHeight + 4
                property int topMargin: 3
                property int bottomMargin: 1
                property real normalHeight: captionHeight + bottomMargin + topMargin
                property real maximizedHeight: captionHeight + bottomMargin
                anchors {
                    left: parent.left
                    right: parent.right
                    top: parent.top
                    //topMargin: decoration.client.maximized ? 0 : titleRow.topMargin
                    //leftMargin: decoration.client.maximized ? 0 : 3
                    //rightMargin: decoration.client.maximized ? 0 : 3
                    bottomMargin: titleRow.bottomMargin
                }

                Text {
                    id: caption
                    textFormat: Text.PlainText
                    anchors {
                        top: parent.top
//                         left: leftButtonGroup.right
//                         right: rightButtonGroup.left
                        rightMargin: 5
                        leftMargin: 5
                        topMargin: 3
                    }
                    //color: options.fontColor
                    Behavior on color {
                        ColorAnimation { duration: root.animationDuration }
                    }
                    //text: decoration.client.caption
                    //font: options.titleFont
                    elide: Text.ElideMiddle
                    renderType: Text.NativeRendering
                }

            }
        }

        Item {
            id: innerBorder
            anchors.fill: parent

            Rectangle {
                anchors {
                    left: parent.left
                    right: parent.right
                }
                height: 1
                y: top.height - 1
                color: 'yellow'
            }

            Rectangle {
                anchors {
                    fill: parent
                    leftMargin: root.borders.left - 1
                    rightMargin: root.borders.right
                    topMargin: root.borders.top - 1
                    bottomMargin: root.borders.bottom
                }
                border {
                    width: 1
                    color: 'purple'
                }
                color: root.titleBarColor
            }
        }
    }

  }
